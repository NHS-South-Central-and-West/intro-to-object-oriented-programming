[
  {
    "objectID": "introduction_to_oop.html#learning-objectives",
    "href": "introduction_to_oop.html#learning-objectives",
    "title": "Introduction to Object-Oriented Programming",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nUnderstand core concepts of object-oriented programming\nUnderstand the benefits of object-oriented programming\nLearn how to create your own object classes"
  },
  {
    "objectID": "introduction_to_oop.html#history",
    "href": "introduction_to_oop.html#history",
    "title": "Introduction to Object-Oriented Programming",
    "section": "History",
    "text": "History\n\nIn the early days of programming, variables could only be the “primitive” data types containing a single value\n\nInteger, Float, Boolean, Char\n\nLater came Structures (“Structs”), which can contain multiple values of different types.\nStructs were the precursor to objects, but they couldn’t yet contain associated functions within them\nObjects first appear in the Simula programming language in the 1960s for modelling physical phenomena\nThose objects influenced Alan Kay, who coined the term “object-oriented programming” to decribe architecture where objects pass information to one another"
  },
  {
    "objectID": "introduction_to_oop.html#fast-forward-to-the-present-day",
    "href": "introduction_to_oop.html#fast-forward-to-the-present-day",
    "title": "Introduction to Object-Oriented Programming",
    "section": "Fast-forward to the present day",
    "text": "Fast-forward to the present day\n\nPython is an object-oriented language, where everything is effectively an object based on class “templates”\n\n\n# Here we are calling the \"append\" method of the list class.\n\nicb_list = ['QRL','QNQ','QU9','QSL'] # a list object\n\nicb_list.append('QNX') # calling the method and passing a parameter\n\nprint(icb_list)\n\n['QRL', 'QNQ', 'QU9', 'QSL', 'QNX']\n\n\n\nSince Python is an object-oriented language, there’s no reason not to create our own classes!"
  },
  {
    "objectID": "introduction_to_oop.html#key-benefits",
    "href": "introduction_to_oop.html#key-benefits",
    "title": "Introduction to Object-Oriented Programming",
    "section": "Key Benefits",
    "text": "Key Benefits\n\nUseful for modelling real-world entities (e.g. simulations of hospital wards to solve queuing problems)\nMakes code more re-usable and extensible\nSimplifies the programmer’s interaction with a program\nSimplifies the interaction between different parts of a program"
  },
  {
    "objectID": "introduction_to_oop.html#classes-and-objects",
    "href": "introduction_to_oop.html#classes-and-objects",
    "title": "Introduction to Object-Oriented Programming",
    "section": "Classes and Objects",
    "text": "Classes and Objects\n\nClasses act as templates for objects\nObjects are instances of classes\n\nWe talk of objects being “instantiated” from a class\n\nObjects represent entities with their own data (attributes) and behaviours (methods)\nWe can create lots of instances of an object with their own attribute values and call methods on them separately and consistently\nObjects are self-contained units that can interact with objects both of the same and of other classes"
  },
  {
    "objectID": "introduction_to_oop.html#a-quick-note-on-constructors",
    "href": "introduction_to_oop.html#a-quick-note-on-constructors",
    "title": "Introduction to Object-Oriented Programming",
    "section": "A quick note on constructors",
    "text": "A quick note on constructors\n\nThe constructor method defines the attributes specific to an object instance when it is created (instantiated)\nAs the method name __init__ suggests, these are the initial values\nIt does not affect anything defined as a class attribute"
  },
  {
    "objectID": "introduction_to_oop.html#inheritance",
    "href": "introduction_to_oop.html#inheritance",
    "title": "Introduction to Object-Oriented Programming",
    "section": "Inheritance",
    "text": "Inheritance\n\nChild classes inherit attributes and methods from parent classes\nChild classes can modify / override and add to what they have inherited\nReduces code duplication\nImproves re-usability and extensibility"
  },
  {
    "objectID": "introduction_to_oop.html#encapsulation",
    "href": "introduction_to_oop.html#encapsulation",
    "title": "Introduction to Object-Oriented Programming",
    "section": "Encapsulation",
    "text": "Encapsulation\n\nBundling data (attributes) with functions (methods)\nMethods are tailor-made to work with the data contained in the object\nSaves on having to pass data between multiple functions, which is particularly useful in machine learning models\nPandas DataFrames demonstrate encapsulation. They contain data, but also have methods associated with them\n\ndf = pd.DataFrame(data) &lt;– Instantiating a dataframe object\ndf.head(), df.describe(), df.drop() &lt;– calling methods"
  },
  {
    "objectID": "introduction_to_oop.html#polymorphism",
    "href": "introduction_to_oop.html#polymorphism",
    "title": "Introduction to Object-Oriented Programming",
    "section": "Polymorphism",
    "text": "Polymorphism\n\nObjects of different types can be treated in the same way, even if the behaviour differs\n\nWith Pandas DataFrames, .head() will work on both a DataFrame and a Series1\n\n“Duck typing”: If the behaviour of a thing matches that of another thing, they are considered the same. In OOP terms, the presence of certain methods is more important than which class an object comes from2\n\nThe sci-kit learn library’s allows the same code to work for different models\n\n\nSeries.head() with return the first few values, while DataFrame.head() returns the first few rows of all columnsThe concept of “duck typing”, found in Python and other languages, comes from the phrase “if it walks like a duck, quacks like a duck and swims like a duck, then it’s a duck.”"
  },
  {
    "objectID": "introduction_to_oop.html#abstraction",
    "href": "introduction_to_oop.html#abstraction",
    "title": "Introduction to Object-Oriented Programming",
    "section": "Abstraction",
    "text": "Abstraction\n\nSeparating the implementation code from the functionality that users (i.e. other programmers) interact with\nCreates a simple interface for parts of a program pass information between each other"
  },
  {
    "objectID": "introduction_to_oop.html#when-to-use-oop",
    "href": "introduction_to_oop.html#when-to-use-oop",
    "title": "Introduction to Object-Oriented Programming",
    "section": "When to use OOP",
    "text": "When to use OOP\n\nWhen you want to easily re-use code, to avoid repetition and to extend functionality\nWhen you want to model real-world entities\nWhen you want to make code modular and easy for others to work with\nLess appropriate for:When you want to be certain of the state of your data at each step of a process, for example when cleansing data"
  },
  {
    "objectID": "introduction_to_oop.html#resources",
    "href": "introduction_to_oop.html#resources",
    "title": "Introduction to Object-Oriented Programming",
    "section": "Resources",
    "text": "Resources\nRealPython: Object-Oriented Programming (OOP) in Python\n\nfreeCodeCamp - Intro to Object-Oriented Programming\n\nHSMA - Introduction to Python Programming Part 3 (including OOP)\n\nHSMA - Introduction to Discrete Event Simulation"
  }
]